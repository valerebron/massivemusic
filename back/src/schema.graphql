type Query {
  tracks(
    search: String
    style: Int
    user: Int
    skip: Int
    first: Int
    orderBy: TrackOrderByInput
    orderDirection: TrackOrderDirectionInput
    pending: Int
    invalid: Int
  ): Tracks!
  styles: [Style!]!
  users(role: String): [User!]!
  user(user_id: Int): User!
  searchTrack(search: String, token: String): tracksPayload
  searchChannel(search: String, token: String): channelsPayload
  getChannelDesc(id: String): String
  info: String!
}

type Mutation {
  post(
    user_id: Int!
    yt_id: String!
    title: String!
    artist: String!
    duration: Int!
    style: Int!
    token: String!
  ): Track!
  editPost(
    id: Int!
    user_id: Int!
    token: String!
    yt_id: String
    title:	String
    artist:	String
    pending: Boolean
    invalid: Boolean
    style: Int
  ): Track!
  dropPost(
    id: Int!
    user_id: Int!
    token: String!
  ): Track!
  validatePost(
    id: Int!
    user_id: Int!
    token: String!
  ): Track!
  invalidatePost(
    id: Int!
  ): Track!
  signup(
    email: String!
    hash: String!
    name: String!
  ): AuthPayload
  login(
    credential: String!
    hash: String!
  ): AuthPayload
  logout(
    user_id: Int!
    token: String!
  ): User
  editUser(
    id: Int!
    name: String
    email: String
    token: String!
    channel_style: Int
    channel_enable_tracks: Boolean
    channel_description: String
  ): User
  dropUser(
    id: Int!
    token: String!
  ): User
  addBot(
    name: String!
    email: String!
    token: String!
    channel_id: String
    channel_style: Int
    channel_enable_tracks: Boolean
    channel_description: String
    channel_avatar_small: String
    channel_avatar_medium: String
    channel_avatar_high: String
  ): User
  syncBot(
    id: Int!
    token: String!
  ): [Track]
}

type AuthPayload {
  token: String
  user: User
}

type tracksPayload {
  token: String
  tracks: [Video]
}

type channelsPayload {
  token: String
  channels: [Channel]
}

type AuthPayload {
  token: String
  user: User
}

type Style {
  id: Int!
  name: String!
  slug: String!
}

type User {
  id: Int!
  name: String!
  email: String!
  tracks: [Track!]!
  role: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  channel_id:             String
  channel_style:          Int
  channel_enable_tracks:  Boolean
  channel_description:    String
  channel_avatar_small:   String
  channel_avatar_medium:  String
  channel_avatar_high:    String
}

type Track {
  id:     Int!
  yt_id:  String!
  title:	String!	
  artist:	String!	
  duration:	Int!
  playcount: Int!
  invalid: Boolean
  pending: Boolean
  style: Style!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Channel {
  name: String
  channel_id: String
  nb_videos: Int
  nb_subscriber: Int
  official: Boolean
  channel_avatar_small: String
  channel_avatar_medium: String
}

type Video {
  id:  String
  title:	String
  artist: String
  duration:	Int,
  publishedAt: String,
}

scalar DateTime

enum TrackOrderByInput {
  createdAt
  updatedAt
  title
  artist
}

enum TrackOrderDirectionInput {
  asc
  desc
}

type Tracks {
  tracks: [Track!]!
  count: Int!
}
